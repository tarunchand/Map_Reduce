import sys
from prettytable import PrettyTable
import matplotlib.pyplot as plt


# Different distance metrics
distances = ['CosineDistanceMeasure', 'EuclideanDistanceMeasure', 'ManhattanDistanceMeasure']
# K Values
k_s = range(3, 21)


def get_cluster_densities(index):
    '''
        Function to read the *-eval.txt (cluster-dump files generated by mahout) and extract Inter-Cluster and Intra-Cluster densities
    '''
    # Variables
    distance_measure = distances[index - 1]
    inter_cluster_densities = []
    intra_cluster_densities = []
    for k in k_s:
        # Read the appropriate cluster-dump file as per naming convention
        cluster_dump_file = f"{distance_measure}-k{k}-eval.txt"
        with open(cluster_dump_file, 'r') as f:
            lines = f.readlines()
            # Get Intra-Cluster density
            intra_cluster_densities.append(float([line for line in lines if "Intra-Cluster Density" in line][0].split(
                        ":")[1].strip()))
            # Get Inter-Cluster density
            inter_cluster_densities.append(float([line for line in lines if "Inter-Cluster Density" in line][0].split(
                        ":")[1].strip()))
    # Print Values
    return inter_cluster_densities, intra_cluster_densities


def plot_table(index):
    '''
        Function to plot table for Intra-Cluster, Inter-Cluster densities and their ratio
    '''
    inter_cluster_densities, intra_cluster_densities = get_cluster_densities(index)
    print('\nTable for : ', distances[index-1])
    table = PrettyTable(['K-Value', 'Intra Cluster Density', 'Inter Cluster Density', 'Ratio'])
    i = 0
    for k in k_s:
        inter_cluster_density = inter_cluster_densities[i]
        intra_cluster_density = intra_cluster_densities[i]
        table.add_row([k, intra_cluster_density, inter_cluster_density, intra_cluster_density/inter_cluster_density ])
        i += 1
    print(table)
    

def plot_graph():
    '''
        Function to plot graph for ratios of Intra-Cluster/Inter-Cluster densities for different distance metrics.
    '''
    ratios = [[], [], []]
    for i in range(0, 3):
        inter_cluster_densities, intra_cluster_densities = get_cluster_densities(i+1)
        for j in range(len(inter_cluster_densities)):
            ratios[i].append(intra_cluster_densities[j]/inter_cluster_densities[j])
    fig, ax = plt.subplots()

    # Plot each list on the same graph
    ax.plot(k_s, ratios[0], label=distances[0])
    ax.plot(k_s, ratios[1], label=distances[1])
    ax.plot(k_s, ratios[2], label=distances[2])

    # Set the title, axis labels, and legend
    ax.set_xticks(k_s)
    ax.set_title('CosineDistanceMeasure vs EuclideanDistanceMeasure vs ManhattanDistanceMeasure')
    ax.set_xlabel('K')
    ax.set_ylabel('Ratio - (Intra-Cluster Density / Inter-Cluster Density)')
    ax.legend()

    # Show the plot
    plt.show()


def main():
    plot_type = input('[?] Select distance measure - Cosine(1), Euclidean(2), Manhattan(3), Ratio Graph(4) : ')
    try:
        plot_type = int(plot_type)
        if plot_type == 1:
            plot_table(1) # CosineDistanceMeasure
        elif plot_type == 2:
            plot_table(2) # EuclideanDistanceMeasure
        elif plot_type == 3:
            plot_table(3) # Manhattan
        elif plot_type == 4:
            plot_graph() # Plot Ratio
        else:
            print('[!] Invalid Option.')
            sys.exit(1)
    except ValueError:
        print('[!] Invalid Input.')
        sys.exit(1)
    except (OSError, KeyboardInterrupt, Exception) as ex:
        print(ex)
        print('[!] An Error Occurred')
        sys.exit(1)


if __name__ == '__main__':
    main()